From 2f57272243b30688a9d7e9edf7da45163a57f947 Mon Sep 17 00:00:00 2001
From: Andre Campbell <campbellandre97@gmail.com>
Date: Fri, 2 Dec 2016 20:07:35 -0500
Subject: [PATCH] Malloc.asm: Updated Malloc to reflect what to do if new sbrk
 is needed

---
 Malloc.asm | 47 ++++++++++++++++++++++++++++++++---------------
 1 file changed, 32 insertions(+), 15 deletions(-)

diff --git a/Malloc.asm b/Malloc.asm
index cf61fcd..b585d39 100644
--- a/Malloc.asm
+++ b/Malloc.asm
@@ -4,7 +4,8 @@ MetadataSize: .word 12
 HeadNode: .space 32
 .text
 Malloc:
-  # start_metadata = $t1, end_metadata = $t2, 
+  # start_metadata = $t1, end_metadata = $t2, $a0 contains user_size, $a1 contains first sbrk flag
+  	ble $a0, $zero, bad_size_or_sbrk_failed
 	la $s0, MetadataSize   # Load MetadataSize
 	lw $s0, 0($s0)         # Load actual MetadataSize in $s0
 	la $s1, HeadNode       # Load HeadNode
@@ -15,10 +16,10 @@ Malloc:
 	or $t0, $a0, $zero     # store user_size in a temp register
 	lw $t1, 0($s2)         # load integer into $t1 (50) from SbrkSize
 	mul $a0,$t1,$a0        # Multiply user_size * SbrkSize
+	or $t6, $a0, $zero     # put user_size * SbrkSize in $t6
 	li $v0, 9              # allocate memory for heap
 	syscall 
-	nor $t2, $zero, $zero   # put -1 in $t2
-	beq $v0, $t2, error_happened # Branch if sbrk didn't work
+	ble $v0, $zero, bad_size_or_sbrk_failed # Branch if sbrk didn't work
 	or $a0, $t0, $zero     # Put user_size back into $a0
 	or $t1, $v0, $zero     # Put start_metadata node address in $t1
 	sw $t1, 0($s1)         # Save node into HeadNode memory location
@@ -28,8 +29,8 @@ Malloc:
 	sw $t2, 8($t1)         # start_metadata->next = new_node
 	sw $t1, 4($t2)         # new_node->prev = start_metadata
 	sw $a0, 0($t2)         # new_node->size = user_size
-	add $t0, $t1, $a0      # add start_metadata + $a0
-	sub $t0, $t0, $s0      # end_metadata = start_metadata + $a0 - METADATASIZE
+	add $t0, $t1, $t6      # add start_metadata + user_size * SbrkSize
+	sub $t0, $t0, $s0      # end_metadata = start_metadata + (user_size * SbrkSize) - METADATASIZE
 	or $t1, $t2, $zero     # move new_node into $t1
 	add_end_metadata:
 		nor $t2, $zero, $zero # put -1 in $t2
@@ -63,17 +64,33 @@ Malloc:
 		sw $t4, 8($t1)        # current->next = new_node
 		add $v0, $t4, $s0     # $v0 = new_node->&(element)
 		jr $ra      
-		
-	error_happened:           
-		
-	make_sbreak:
-		addi $t3, $t1, 20     # Next node start address
-		sw $t3, 8($t1)        # Save Next Node address in nextPTR
-		sw $t4, 0($t3)        # Save new Node's size in first 4 bytes of node
-		sw $t1, 4($t3)        # Save Current Node address in Prev*PTR of next node
-		sw $zero, 8($t3)      # Make Next*PTR of the new Node  = NULL
-		sw $a0, 12($t3)       # Save [number] in Number of Node 
+		         
 	
+	make_sbreak:
+		# $t1 = temp, $t2 = temp->next
+		or $t0, $a0, $zero    # $t0 = user_size
+		mul $a0, $a0, $s2     # $a0 = user_size * SbrkSize
+		or $t6, $a0, $zero    # $t6 = user_size * SbrkSize
+		li $v0, 9             # Load sbrk code
+		syscall
+		ble $v0, $zero, bad_size_or_sbrk_failed
+		or $t4, $v0, $zero    # Load new sbrk address into $t4 (start_metadata)
+		sw $zero, 0($t4)      # start_metadata->size = 0
+		sw $t1, 4($t4)        # start_metadata->prev = temp
+		or $t5, $t4, $s0      # new_node = &(start_metadata) + 12
+		sw $t5, 8($t4)        # start_metadata->next = new_node
+		or $a0, $t0, $zero    # $a0 = user_size 
+		sw $a0, 0($t5)        # new_node->size = user_size
+		sw $t4, 4($t5)        # new_node->prev = start_metadata
+		sw $t4, 8($t1)        # temp->next = start_metadata
+		add $t0, $t4, $t6     # add start_metadata + (user_size *SbrkSize)
+		sub $t0, $t0, $s0     # end_metadata = [start_metadata + (user_size *SbrkSize)] - METADATASIZE
+		or $t1, $t5, $zero    # $t1 = new_node
+		j add_end_metadata
+
+bad_size_or_sbrk_failed:
+	or $v0, $zero, $zero      # Load zero into return register
+	jr $ra	
 		
 
 # Accessing Node data members:
-- 
2.9.3 (Apple Git-75)

