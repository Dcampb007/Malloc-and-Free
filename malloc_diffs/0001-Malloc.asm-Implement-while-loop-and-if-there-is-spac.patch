From c266ce2603ec77744a72a87b60f2c5bd77d70083 Mon Sep 17 00:00:00 2001
From: Andre Campbell <campbellandre97@gmail.com>
Date: Fri, 2 Dec 2016 00:20:18 -0500
Subject: [PATCH] Malloc.asm: Implement while loop and if there is space in
 between two nodes

---
 Malloc.asm | 54 ++++++++++++++++++++++++++----------------------------
 1 file changed, 26 insertions(+), 28 deletions(-)

diff --git a/Malloc.asm b/Malloc.asm
index cecb5be..cf61fcd 100644
--- a/Malloc.asm
+++ b/Malloc.asm
@@ -17,7 +17,8 @@ Malloc:
 	mul $a0,$t1,$a0        # Multiply user_size * SbrkSize
 	li $v0, 9              # allocate memory for heap
 	syscall 
-	beq $v0, $t1, error_happened # Branch if sbrk didn't work
+	nor $t2, $zero, $zero   # put -1 in $t2
+	beq $v0, $t2, error_happened # Branch if sbrk didn't work
 	or $a0, $t0, $zero     # Put user_size back into $a0
 	or $t1, $v0, $zero     # Put start_metadata node address in $t1
 	sw $t1, 0($s1)         # Save node into HeadNode memory location
@@ -31,43 +32,41 @@ Malloc:
 	sub $t0, $t0, $s0      # end_metadata = start_metadata + $a0 - METADATASIZE
 	or $t1, $t2, $zero     # move new_node into $t1
 	add_end_metadata:
-		sw $zero, 8($t0)    # end_metadata->next = NULL
+		nor $t2, $zero, $zero # put -1 in $t2
+		sw $t2, 0($t0)      # end_metadata->size = -1
 		sw $t1, 4($t0)      # end_metadata->prev = new_node
+		sw $zero, 8($t0)    # end_metadata->next = NULL
 		sw $t0, 8($t1)      # node->next = end_metadata
 		add $t1, $t1, $s0   # get address of new_node->element
 		or $v0, $t1, $zero  # put new_node->element into $v0
 		jr $ra
 	not_first:
-		or $t1, $s1, $zero   # move head node address in $t1 (temp)
+		la $t1, HeadNode     # Load first start_metadata into $t1 (temp)
 		while_loop:     # While current->next != NULL 
 		lw $t2, 8($t1)        # load current->next*PTR
-		beq $t2, $zero, found_end
-		lw $t3, 16($t1)       # Load current->right-FreeSpace
-		ori $t4, $zero, 24    # Put size of node in $t4
-		bge $t3, $t4, space_available  # Branch if enough Space is available to add node (in between 2 nodes)
+		beq $t2, $zero, make_sbreak
+		lw $t3, 0($t1)        # load current->size into $t3
+		add $t4, $t3, $t1     # $t4 = current->size + &(current)
+		add $t4, $t4, $s0     # $t4 = $t4 + METADATASIZE
+		sub $t4, $t2, $t3     # $t4 = current->next - $t4
+		add $t5, $a0, $s0     # $t5 = user_size + METADATASIZE
+		bge $t4, $t5, space_available  # Branch if enough Space is available to add node (in between 2 nodes)
 		or $t1, $t2, $zero    # Move next*PTR into $t1
 		j while_loop
 	space_available:
-		sw $zero, 12($t1)     # Save 0 in current->right-FreeSpace
-		addi $t1, $t1, 24     # Current = new Node
-		addi $t2, $zero, 24   # Store 24 in $t2
-		sw $t2, 0($t1)        # Save size in current->size
-		la $t4, LAST_NODE     # Load address of Last Node
-		sw $t4, 4($t1)        # Save Last Node address in current->previousPTR
-		sw $zero, 8($t1)      # Save 0 (NULL) in current->nextPTR
-		sw $zero, 12($t1)      # Save 0 in current->left-FreeSpace 
-		sub $t3, $t3, $t2     # Subtract size of new node from current->right-FreeSpace (FS-24)
-		sw $t3, 16($t1)       # Save FreeSpace in Current->right-FreeSpace (new node)
-		or $v0, $t1, $zero    # Store Current& in $v0
-		jr $ra                 
-		
-		
+		add $t4, $t1, $t3     # $t4 = &(current) + current->size
+		add $t4, $t4, $s0     # new_node = &(current) + current->size + METADATASIZE
+		sw $a0, 0($t4)        # new_node->size = $a0
+		sw $t2, 8($t4)        # save new_node->next = current->next
+		sw $t4, 4($t2)        # Save current->next->prev = new_node
+		sw $t1, 4($t4)        # new_node->prev = current
+		sw $t4, 8($t1)        # current->next = new_node
+		add $v0, $t4, $s0     # $v0 = new_node->&(element)
+		jr $ra      
 		
+	error_happened:           
 		
-		
-		
-		
-	found_end:
+	make_sbreak:
 		addi $t3, $t1, 20     # Next node start address
 		sw $t3, 8($t1)        # Save Next Node address in nextPTR
 		sw $t4, 0($t3)        # Save new Node's size in first 4 bytes of node
@@ -81,6 +80,5 @@ Malloc:
 	# Accessing node size: node*ptr + 0
 	# Accessing previousPTR: node* ptr + 4 
 	# Accessing nextPTR: node* ptr + 8
-	# Accessing Left Free Space (bytes): node* ptr + 12
-	# Accessing Right Free Space (bytes): node* ptr + 16
-	# Accessing Number: node* ptr + 20
+	# Accessing element: node* ptr + 12
+
-- 
2.9.3 (Apple Git-75)

