Linked List Style
Class definition of Node :
------------------------------------
||      |PREVIOUS|NEXT   |        ||
|| SIZE |NODE    |NODE   | ELEMENT||
||      |POINTER |POINTER|        ||
------------------------------------

Node Cases

First Meta Data
---------------
Size = 0
Prev = 0
Next =

End Meta Data
---------------
Size = -1
Prev = ??
Next = 0

Normal Node
-----------
Size= ??? (Positive Integer)
Prev = ??? (not 0)
Next = ??? (not 0)

static boolean firstSbrk = true  //FIRST SBRK ($a1)
Node* global_head = NULL  //has not been intialized yet
const int METADATASIZE = 12
static int DEFAULTSBRKVALUE  = 50 // temp value

malloc($a0){
    if ($a0 <= 0) // if the size asked for is negative or 0
        return 0;

    if(firstSbrk){
        firstSbrk = false // won't sbreak the first time anymore
        int user_size = $a0 // save user size
        $a0 =  DEFAULTSBRKVALUE * $user_size // make enough space for more than what they ask for
        syscall instruction 9 for sbrk
        if($v0 == -1) {
            return -1 // output error, sbrk failed
        }
        $a0 = user_size // reestablish the user_size in $a0
        start_metadata* = $v0 // start metadata = $v0
        global_head = start_metadata  // set head = start metadata
        Node* new_node = start_metadata + 12 // new_node metadata starts here
        start_metadata->size = 0 // indicates start of an sbrk
        start_metadata->prev = NULL // indicates start of head
        start_metadata->next = new_node
        new_node->size= $a0 // Size called with malloc
        new_node->prev= start_metadata // since it's the head
        new_node->next= NULL // since it's the only element

add_end_metadata:
        Node* end_metadata = start_metadata + $a0 - METADATASIZE; // end_node address for the first Sbrk
        end_metadata->next = NULL // the end_metadata's next doesn't point to anything
        end_metadata->size = -1 // indicates end of a sbrk
        end_metadata->prev = new_node // make the end_metadata's previous point to head
        new_node->next = end_metadata // set new_node->next  to be the end metadata
        return new_node+12
    }
    else{
        Node* temp = global_head; // Used to traverse through LL
        Node* new_node; // Used to insert new node into LL
        while(temp->next!=NULL) { // while temp != the end of the sbrk
            if((temp->next - (temp + temp->size + METADATASIZE) >= $a0 + METADATASIZE ){ // If there is enough space b/w the two nodes
                new_node = temp + temp->size + METADATASIZE // new_node address is temp's address + temp's size  + METADATASIZE
                new_node->size = $a0 // Save size into new_node->size
                new_node->next = temp->next; // set new_node's next to temp's next
                new_node->prev = temp; // set new_node's previous to temp
                temp->next = new_node; // set temp's next to new_node
                return new_node+12 // return new_node address
            }
            temp = temp->next;
        }
        if(temp->next==NULL){//ie if there is no space in that heap
            int user_size = $a0 // temp store user size
            $a0 = DEFAULTSBRKVALUE * user_size // make sure size is bigger than what user is asking for
            syscall instruction 9 for sbrk // get more space
            if($v0 == -1) {
                return -1 // output error, sbrk failed
            }
            $t0 = $a0    // Put a0 into t0
            Node* start_metadata* = $v0 // make new start metadata
            Node* new_node = start_metadata + 12 // new_node metadata starts here
            start_metadata->size = 0 // indicates start of an sbrk
            start_metadata->prev = temp // new start of sbrk's prev = old end metadata
            start_metadata->next = new_node
            $a0 = user_size  // load original user asked size into $a0
            new_node->size= $a0 // Size called with malloc (user_size)
            new_node->prev= start_metadata // since it's the head
            temp->next = start_metadata // set previous end_metadata to point to start of new sbrk
            $t0 = &start_metadata + (user_size* Sbrksize) - METADATASIZE // new end_metadata = &start_metadata + (user_size* Sbrksize)
            $t1 = new_node
            j add_end_metadata // jump to label to add end_metadata
        }
    }
    
}
